# Dockerfile Corrigido para Roadmap App - EasyPanel Deploy
FROM node:18-alpine

# Instalar dependências do sistema
RUN apk add --no-cache dumb-init

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./
COPY yarn.lock* ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar todas as dependências
RUN npm ci

# Copiar código fonte
COPY . .

# Gerar cliente Prisma
RUN npx prisma generate

# Limpar dist anterior se existir
RUN rm -rf dist

# Build da aplicação usando TypeScript diretamente
RUN npx tsc -p tsconfig.build.json

# Verificar se main.js foi gerado
RUN ls -la dist/ && ls -la dist/ | grep main

# Se não existir main.js, usar build alternativo
RUN if [ ! -f "dist/main.js" ]; then \
      echo "main.js não encontrado, tentando build alternativo..."; \
      npx nest build; \
      ls -la dist/; \
    fi

# Verificar novamente
RUN ls -la dist/ && ls -la dist/ | grep main

# Copiar arquivos públicos manualmente se necessário
RUN cp -r public dist/ || true

# Remover devDependencies para reduzir tamanho
RUN npm prune --production

# Criar usuário não-root para segurança
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs

# Configurar permissões
RUN chown -R nestjs:nodejs /app

# Configurar usuário
USER nestjs

# Expor porta
EXPOSE 3003

# Variáveis de ambiente padrão
ENV NODE_ENV=production
ENV PORT=3003

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3003/api/health/check', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Comando de inicialização
CMD ["dumb-init", "node", "dist/main.js"]
