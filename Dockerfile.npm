# Dockerfile alternativo usando npm start:prod
FROM node:18-alpine

# Instalar dependências do sistema
RUN apk add --no-cache dumb-init

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./
COPY yarn.lock* ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar todas as dependências
RUN npm ci

# Copiar código fonte
COPY . .

# Gerar cliente Prisma
RUN npx prisma generate

# Build da aplicação
RUN npm run build

# Debug: listar arquivos gerados
RUN ls -la dist/

# Remover devDependencies para reduzir tamanho
RUN npm prune --production

# Criar usuário não-root para segurança
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs

# Configurar permissões
RUN chown -R nestjs:nodejs /app

# Configurar usuário
USER nestjs

# Expor porta
EXPOSE 3003

# Variáveis de ambiente padrão
ENV NODE_ENV=production
ENV PORT=3003

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3003/api/health/check', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Comando de inicialização usando npm script
CMD ["dumb-init", "npm", "run", "start:prod"]
