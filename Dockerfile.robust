# Dockerfile Robusto para Roadmap App - EasyPanel Deploy
# M√∫ltiplas estrat√©gias de build para garantir sucesso

# Est√°gio de build
FROM node:18-alpine AS builder

# Instalar depend√™ncias do sistema
RUN apk add --no-cache libc6-compat

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar arquivos de configura√ß√£o
COPY package*.json ./
COPY yarn.lock* ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar TODAS as depend√™ncias (incluindo devDependencies para o build)
RUN npm ci && npm cache clean --force

# Copiar c√≥digo fonte
COPY . .

# Gerar cliente Prisma
RUN npx prisma generate

# Limpar completamente o diret√≥rio dist
RUN rm -rf dist && mkdir -p dist

# Estrat√©gia 1: Build com NestJS CLI (padr√£o)
RUN echo "üî® === ESTRAT√âGIA 1: NestJS CLI Build ===" && \
    npx nest build && \
    echo "‚úÖ Build NestJS conclu√≠do" && \
    ls -la dist/ || echo "‚ùå Falhou strategy 1"

# Estrat√©gia 2: Se falhou, tentar TypeScript diretamente
RUN if [ ! -f "dist/main.js" ]; then \
      echo "üî® === ESTRAT√âGIA 2: TypeScript Build Direto ==="; \
      npx tsc -p tsconfig.build.json && \
      echo "‚úÖ Build TypeScript conclu√≠do" && \
      ls -la dist/ || echo "‚ùå Falhou strategy 2"; \
    fi

# Estrat√©gia 3: Build manual se ainda n√£o funcionou
RUN if [ ! -f "dist/main.js" ]; then \
      echo "üî® === ESTRAT√âGIA 3: Build Manual ==="; \
      npx tsc src/main.ts --outDir dist --module commonjs --target ES2023 --experimentalDecorators --emitDecoratorMetadata && \
      echo "‚úÖ Build manual conclu√≠do" && \
      ls -la dist/ || echo "‚ùå Falhou strategy 3"; \
    fi

# Verifica√ß√£o final e debug completo
RUN echo "üîç === VERIFICA√á√ÉO FINAL ===" && \
    echo "Conte√∫do do diret√≥rio dist:" && \
    find dist -type f -name "*.js" -exec ls -la {} \; && \
    echo "Procurando main.js:" && \
    find . -name "main.js" -type f && \
    if [ ! -f "dist/main.js" ]; then \
      echo "‚ùå ERRO CR√çTICO: main.js n√£o foi gerado!"; \
      echo "=== DEBUG: Estrutura completa ==="; \
      find dist -type f | head -20; \
      echo "=== DEBUG: Tentativa com diferentes configs ==="; \
      npx tsc --listFiles | grep main || true; \
      exit 1; \
    else \
      echo "‚úÖ SUCCESS: main.js encontrado!"; \
      ls -la dist/main.js; \
      echo "=== Testando arquivo ==="; \
      node -e "console.log('main.js √© v√°lido')" && \
      echo "‚úÖ main.js √© um arquivo v√°lido"; \
    fi

# Est√°gio de produ√ß√£o
FROM node:18-alpine AS production

# Instalar depend√™ncias do sistema
RUN apk add --no-cache dumb-init

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar package.json e schema do Prisma primeiro  
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma

# Instalar depend√™ncias de produ√ß√£o E gerar o Prisma Client
RUN npm ci --only=production && \
    npx prisma generate && \
    npm cache clean --force

# Copiar arquivos buildados
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/public ./public

# Debug final: verificar arquivos copiados E Prisma Client
RUN echo "üîç === VERIFICA√á√ÉO PRODU√á√ÉO ===" && \
    ls -la dist/ && \
    test -f dist/main.js && echo "‚úÖ main.js presente em produ√ß√£o" || exit 1 && \
    echo "üîç === VERIFICA√á√ÉO PRISMA ===" && \
    ls -la node_modules/.prisma/client/ && \
    echo "‚úÖ Prisma Client presente" && \
    node -e "try { require('@prisma/client'); console.log('‚úÖ Prisma Client importa OK'); } catch(e) { console.log('‚ùå Prisma ERRO:', e.message); exit(1); }"

# Configurar usu√°rio
USER nestjs

# Expor porta
EXPOSE 3003

# Vari√°veis de ambiente padr√£o
ENV NODE_ENV=production
ENV PORT=3003

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3003/api/health/check', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Comando de inicializa√ß√£o
CMD ["dumb-init", "node", "dist/main.js"]
